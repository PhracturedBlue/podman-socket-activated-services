From b51b4ea97e5d66353e8048759229818a7c137b4b Mon Sep 17 00:00:00 2001
From: PhracturedBlue <rc2012@pblue.org>
Date: Sat, 9 Sep 2023 09:30:19 -0700
Subject: [PATCH] Add socket-activation support

---
 cli/command_server_control_test.go            | 94 +++++++++++++++++++
 cli/command_server_tls.go                     | 27 ++++--
 go.mod                                        |  1 +
 go.sum                                        |  4 +-
 site/content/docs/Repository Server/_index.md | 25 +++++
 5 files changed, 144 insertions(+), 7 deletions(-)

diff --git a/cli/command_server_control_test.go b/cli/command_server_control_test.go
index a9b1307fef..a461b2286f 100644
--- a/cli/command_server_control_test.go
+++ b/cli/command_server_control_test.go
@@ -1,7 +1,11 @@
 package cli_test
 
 import (
+	"net"
+	"os"
 	"runtime"
+	"strconv"
+	"syscall"
 	"testing"
 	"time"
 
@@ -218,6 +222,96 @@ func TestServerControlUDS(t *testing.T) {
 	}
 }
 
+func TestServerControlSocketActivated(t *testing.T) {
+	if runtime.GOOS == "windows" {
+		t.Skip()
+	}
+
+	var port int
+
+	env := testenv.NewCLITest(t, testenv.RepoFormatNotImportant, testenv.NewInProcRunner(t))
+
+	dir0 := testutil.TempDirectory(t)
+
+	env.RunAndExpectSuccess(t, "repo", "create", "filesystem", "--path", env.RepoDir, "--override-username=another-user", "--override-hostname=another-host")
+	env.RunAndExpectSuccess(t, "snap", "create", dir0)
+
+	env.RunAndExpectSuccess(t, "repo", "connect", "filesystem", "--path", env.RepoDir, "--override-username=test-user", "--override-hostname=test-host")
+
+	serverStarted := make(chan struct{})
+	serverStopped := make(chan struct{})
+
+	var sp testutil.ServerParameters
+
+	go func() {
+		os.Setenv("LISTEN_FDS", "1")
+		os.Setenv("LISTEN_PID", strconv.Itoa(os.Getpid()))
+
+		in2, err := syscall.Dup(3)
+		if err != nil {
+			close(serverStarted)
+			return
+		}
+
+		defer func() {
+			syscall.Close(3)
+			syscall.Dup2(in2, 3)
+			syscall.Close(in2)
+		}()
+
+		syscall.Close(3)
+
+		l1, err := net.Listen("tcp", ":0")
+		if err != nil {
+			close(serverStarted)
+			return
+		}
+
+		port = l1.Addr().(*net.TCPAddr).Port
+
+		t.Logf("Activating socket on %v, PID: %v", port, os.Getpid())
+
+		wait, _ := env.RunAndProcessStderr(t, sp.ProcessOutput,
+			"server", "start", "--insecure", "--random-server-control-password", "--address=127.0.0.1:0")
+
+		close(serverStarted)
+		os.Unsetenv("LISTEN_FDS")
+		os.Unsetenv("LISTEN_PID")
+
+		wait()
+
+		close(serverStopped)
+	}()
+
+	select {
+	case <-serverStarted:
+		if sp.BaseURL == "" {
+			t.Fatalf("Failed to start server")
+		}
+
+		t.Logf("server started on %v", sp.BaseURL)
+
+	case <-time.After(5 * time.Second):
+		t.Fatalf("server did not start in time")
+	}
+
+	require.Contains(t, sp.BaseURL, ":"+strconv.Itoa(port))
+
+	lines := env.RunAndExpectSuccess(t, "server", "status", "--address", "http://127.0.0.1:"+strconv.Itoa(port), "--server-control-password", sp.ServerControlPassword, "--remote")
+	require.Len(t, lines, 1)
+	require.Contains(t, lines, "REMOTE: another-user@another-host:"+dir0)
+
+	env.RunAndExpectSuccess(t, "server", "shutdown", "--address", sp.BaseURL, "--server-control-password", sp.ServerControlPassword)
+
+	select {
+	case <-serverStopped:
+		t.Logf("server shut down")
+
+	case <-time.After(15 * time.Second):
+		t.Fatalf("server did not shutdown in time")
+	}
+}
+
 func hasLine(lines []string, lookFor string) bool {
 	for _, l := range lines {
 		if l == lookFor {
diff --git a/cli/command_server_tls.go b/cli/command_server_tls.go
index 8e1e4ee29b..e49e7e4226 100644
--- a/cli/command_server_tls.go
+++ b/cli/command_server_tls.go
@@ -19,6 +19,8 @@ import (
 
 	"github.com/pkg/errors"
 
+	"github.com/coreos/go-systemd/v22/activation"
+
 	"github.com/kopia/kopia/internal/tlsutil"
 )
 
@@ -39,15 +41,28 @@ func (c *commandServerStart) startServerWithOptionalTLS(ctx context.Context, htt
 
 	var err error
 
-	if strings.HasPrefix(httpServer.Addr, "unix:") {
-		l, err = net.Listen("unix", strings.TrimPrefix(httpServer.Addr, "unix:"))
-	} else {
-		l, err = net.Listen("tcp", httpServer.Addr)
+	listeners, err := activation.Listeners()
+	if err != nil {
+		return errors.Wrap(err, "socket-activation error")
 	}
 
-	if err != nil {
-		return errors.Wrap(err, "listen error")
+	switch len(listeners) {
+	case 0:
+		if strings.HasPrefix(httpServer.Addr, "unix:") {
+			l, err = net.Listen("unix", strings.TrimPrefix(httpServer.Addr, "unix:"))
+		} else {
+			l, err = net.Listen("tcp", httpServer.Addr)
+		}
+
+		if err != nil {
+			return errors.Wrap(err, "listen error")
+		}
+	case 1:
+		l = listeners[0]
+	default:
+		return errors.Errorf("Too many activated sockets found.  Expected 1, got %v", len(listeners))
 	}
+
 	defer l.Close() //nolint:errcheck
 
 	httpServer.Addr = l.Addr().String()
diff --git a/go.mod b/go.mod
index 07c6c30767..a3706a3fdc 100644
--- a/go.mod
+++ b/go.mod
@@ -13,6 +13,7 @@ require (
 	github.com/chmduquesne/rollinghash v4.0.0+incompatible
 	github.com/chromedp/cdproto v0.0.0-20230802225258-3cf4e6d46a89
 	github.com/chromedp/chromedp v0.9.2
+	github.com/coreos/go-systemd/v22 v22.5.0
 	github.com/dustinkirkland/golang-petname v0.0.0-20191129215211-8e5a1ed0cff0
 	github.com/edsrzf/mmap-go v1.1.0
 	github.com/fatih/color v1.15.0
diff --git a/go.sum b/go.sum
index c8e4a9cdfb..bbda871034 100644
--- a/go.sum
+++ b/go.sum
@@ -77,7 +77,9 @@ github.com/cncf/udpa/go v0.0.0-20210930031921-04548b0d99d4/go.mod h1:6pvJx4me5XP
 github.com/cncf/xds/go v0.0.0-20210805033703-aa0b78936158/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=
 github.com/cncf/xds/go v0.0.0-20210922020428-25de7278fc84/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=
 github.com/cncf/xds/go v0.0.0-20211011173535-cb28da3451f1/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=
-github.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=
+github.com/coreos/go-systemd/v22 v22.5.0 h1:RrqgGjYQKalulkV8NGVIfkXQf6YYmOyiJKk8iXXhfZs=
+github.com/coreos/go-systemd/v22 v22.5.0/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=
+ggithub.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=
 github.com/danieljoos/wincred v1.2.0 h1:ozqKHaLK0W/ii4KVbbvluM91W2H3Sh0BncbUNPS7jLE=
 github.com/danieljoos/wincred v1.2.0/go.mod h1:FzQLLMKBFdvu+osBrnFODiv32YGwCfx0SkRa/eYHgec=
 github.com/davecgh/go-spew v0.0.0-20161028175848-04cdfd42973b/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
diff --git a/site/content/docs/Repository Server/_index.md b/site/content/docs/Repository Server/_index.md
index 6612a42dc7..65ca5d2621 100644
--- a/site/content/docs/Repository Server/_index.md	
+++ b/site/content/docs/Repository Server/_index.md	
@@ -322,3 +322,28 @@ server {
 ```shell
 kopia server start --address unix:/tmp/kopia.sock --tls-cert-file ~/my.cert --tls-key-file ~/my.key
 ```
+
+## Kopia with systemd
+
+Kopia can be run as a socket-activated systemd service.  While socket-activation is not typically needed
+for Kopia, it can be usefull when run in a rootless Podman container, or to control the permissions
+of the unix-domain-socket when run behind a reverse proxy.
+
+Kopia will automatically detect socket-activation when present and ignore the --address switch.
+
+When using socket-activation with Kopia server, it is generally deriable to enable both the socket and
+the service so that the service starts immediately instead of on-demand (so that the maintenance can run).
+
+An example kopia.socket file using unix domain sockets and permission control may look like:
+
+```
+[Unit]
+Description=Kopia
+
+[Socket]
+ListenStream=%t/kopia/kopia.sock
+SocketMode=0666
+
+[Install]
+WantedBy=sockets.target
+```
